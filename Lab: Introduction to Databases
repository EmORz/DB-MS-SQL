CREATE TABLE Clients (
	Id INT PRIMARY KEY IDENTITY,
	FirstName NVARCHAR(50) NOT NULL,
	LastName NVARCHAR(50) NOT NULL
)

--Step 2. Create table AccountType with:
--•	Id – unique number for every type. (Auto incremented, primary key)
--•	Name – the name of the account type, no longer than 50 Unicode characters (Cannot be null)
CREATE TABLE AccountTypes (
   Id INT PRIMARY KEY IDENTITY,
   [Name] NVARCHAR(50) NOT NULL
)

--Step 3. Create table Accounts with:
--•	Id - unique number for every user. (Auto incremented, primary key)
--•	AccountTypeId – references the AccountTypes table (foreign key)
--•	Balance – decimal data type with up to 15 digits including 2 after the decimal point and a default value of 0 (Not null)
--•	ClientId – reSferences the Clients table (foreign key)

CREATE TABLE Accounts(
	Id INT PRIMARY KEY IDENTITY,
	AccountTypeId INT FOREIGN KEY REFERENCES AccountTypes (Id),
	Balance DECIMAL (15, 2) NOT NULL DEFAULT(0),
	ClientId INT FOREIGN KEY REFERENCES Clients(Id)
)

INSERT INTO Clients (FirstName, LastName) VALUES
('Gosho', 'Ivanov'),
('Pesho', 'Petrov'),
('Ivan', 'Iliev'),
('Merry', 'Ivanova')

INSERT INTO AccountTypes (Name) VALUES
('Checking'),
('Savings')

INSERT INTO Accounts (ClientId, AccountTypeId, Balance) VALUES
(1, 1, 175),
(2, 1, 275.56),
(3, 1, 138.01),
(4, 1, 40.30),
(4, 2, 375.50)


CREATE FUNCTION f_CalculateTotalBalance(@ClientID INT)
RETURNS DECIMAL(15,2)
BEGIN
   DECLARE @result AS DECIMAL(15, 2) = (
       SELECT SUM(Balance)
	   FROM Accounts WHERE ClientId = @ClientID
   )
   RETURN @result
END

SELECT dbo.f_CalculateTotalBalance(1) AS Balance

GO
CREATE PROC p_AddAccount @ClientId INT, @AccountTypeId INT AS
INSERT INTO Accounts(ClientId, AccountTypeId)
VALUES (@ClientId, @AccountTypeId)

p_AddAccount 2, 1

GO
CREATE PROC p_Deposit @AccountId INT, @Amount DECIMAL(15, 2) AS
UPDATE Accounts
SET Balance+=@Amount
WHERE Id = @AccountId



GO
CREATE PROC p_Withdraw @AccountID INT, @Amount DECIMAL(15,2) AS
BEGIN 
    DECLARE @OldBalance DECIMAL (15, 2)
	SELECT @OldBalance = Balance FROM Accounts WHERE Id = @AccountID
	IF(@OldBalance  - @Amount >= 0)
	BEGIN
	   UPDATE Accounts
	   SET Balance-=@Amount
	   WHERE Id = @AccountID
	END
	ELSE
	BEGIN
	RAISERROR('Insufficient funds', 10, 1)
	END
END


CREATE TABLE Transactions(
    Id INT PRIMARY KEY IDENTITY,
	AccountId INT FOREIGN KEY REFERENCES Accounts(Id),
	OldBalance DECIMAL(15, 2) NOT NULL,
	NewBalance DECIMAL(15, 2) NOT NULL,
	Amount AS NewBalance - OldBalance,
	[DateTime] DATETIME2
)


GO
CREATE TRIGGER tr_Transaction ON Accounts
AFTER UPDATE
AS
	INSERT INTO Transactions (AccountId, OldBalance, NewBalance, [DateTime])
	SELECT inserted.ID, deleted.Balance, inserted.Balance, GETDATE()FROM inserted
	JOIN deleted ON inserted.Id = deleted.Id

p_Deposit 1, 25.00
GO

p_Deposit 1, 40.00
GO

p_Withdraw 2, 200.00
GO

p_Deposit 4, 180.00
GO


SELECT * FROM Transactions
