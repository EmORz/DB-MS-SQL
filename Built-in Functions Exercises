Lab
SELECT CustomerID,
        FirstName,
		LastName,
		SUBSTRING(PAYMENTNUMBER,1, 6)+REPLICATE( '*', LEN(PAYMENTNUMBER)-6)
  FROM Customers
  
 CREATE VIEW v_PublicPaymentInfo AS
 SELECT CustomerID,
        FirstName,
		LastName,
		SUBSTRING(PAYMENTNUMBER,1, 6)+REPLICATE( '*', LEN(PAYMENTNUMBER)-6) AS PaymentNumber
  FROM Customers AS e

  SELECT * FROM v_PublicPaymentInfo
  
    SELECT Id,
         A*H/2 AS Area
  FROM Triangles2
    SELECT Id,
           A,
	   H,
           CONCAT(' => ', A*H/2) AS Area
   FROM Triangles2
  
  SELECT Id,
       SQRT(SQUARE(X1-X2)+SQUARE(Y1-Y2)) AS Lenght
 FROM Lines
 
  SELECT CEILING(CEILING( CAST(Quantity AS FLOAT)/BoxCapacity)/PalletCapacity) AS [Number of pallets]
  FROM Products
  
  
  SELECT Id,
         ProductName,
		 DATEPART(QUARTER, OrderDate) AS [Quarter],
		 DATEPART(MONTH, OrderDate) AS [Month],
		 DATEPART(YEAR, OrderDate) AS [Year]
   FROM Orders
   
--Show employee experience
--HIREDATE
SELECT EmployeeID,
       FirstName,
       LastName,
       DATEDIFF(YEAR, HireDate, '2017/01/25') AS [Years In Service]
 FROM Employees
 ORDER BY FirstName
 
-- CAST(Data AS NewType)
SELECT ProjectID,
       Name,
	   ISNULL(CAST(EndDate AS varchar), 'Not Finished')
 FROM Projects

-- COALESCE â€“ evaluates the arguments in order and returns the current value of the first expression that
-- initially does not evaluate to NULL
SELECT COALESCE(NULL, NULL, 'THIRD_VALUE', NULL, 'FOURTH_VALUE')


 SELECT EmployeeID, FirstName, LastName
    FROM Employees
ORDER BY EmployeeID
  OFFSET 10 ROWS
   FETCH NEXT 5 ROWS ONLY

******************************************************************
Exercises

01. Find Names of All Employees by First Name 
SELECT FirstName, LastName
  FROM Employees
WHERE FirstName LIKE 'SA%'

02. Find Names of All Employees by Last Name 
SELECT FirstName, LastName
  FROM Employees
WHERE LastName LIKE '%ei%'

03. Find First Names of All Employess 
SELECT FirstName
  FROM Employees
WHERE DepartmentID IN(3,10) AND DATEPART(YEAR, HireDate) BETWEEN 1995 AND 2005

04. Find All Employees Except Engineers 
SELECT FirstName,
       LastName
  FROM Employees
WHERE  JobTitle not like '%engineer%'

05. Find Towns with Name Length 
select Name
  from Towns
 where LEN(Name) in (5,6)
order by Name

06. Find Towns Starting With 
select TownID, [Name]
  from Towns
 where Name like 'b%' or Name like 'k%' or Name like 'm%' or Name like 'e%'
order by Name

07. Find Towns Not Starting With 
select TownID, [Name]
  from Towns
 where left(Name, 1) not like '[RBd]'
order by Name

08. Create View Employees Hired After 
CREATE VIEW V_EmployeesHiredAfter2000
AS
SELECT FirstName, 
       LastName
  FROM Employees
WHERE DATEPART(YEAR, HireDate) > 2000

09. Length of Last Name 
SELECT FirstName,
       LastName
 FROM Employees
WHERE LEN(LASTNAME) = 5

10. Rank Employees by Salary 
  SELECT i.EmployeeID,
         i.FirstName,
         i.LastName,
		 i.Salary,
		 DENSE_RANK() OVER   
         (PARTITION BY i.Salary ORDER BY i.EmployeeID) AS Rank  
   FROM Employees AS i
   WHERE Salary BETWEEN 10000 AND 50000 
   ORDER BY Salary DESC
   
   
   11. Find All Employees with Rank 2 (not included in final score)
   SELECT *
   FROM (
       SELECT EmployeeID,
              FirstName,
              LastName,
              Salary,
              DENSE_RANK() OVER(PARTITION BY Salary ORDER BY EmployeeID) AS Rank
	   FROM Employees AS R  
   ) Employees  
   WHERE Rank = 2 AND Salary BETWEEN 10000 AND 50000 
   ORDER BY Salary DESC
   //*  CREATE VIEW V_EmployeeByRank AS
  SELECT *
   FROM (
       SELECT EmployeeID,
              FirstName,
              LastName,
              Salary,
              DENSE_RANK() OVER(PARTITION BY Salary ORDER BY EmployeeID) AS Rank
	   FROM Employees AS R  
   ) Employees  
   WHERE Rank = 2 AND Salary BETWEEN 10000 AND 50000   

   SELECT * FROM V_EmployeeByRank
   ORDER BY Salary DESC*//
   
   12. Countries Holding 'A'
   SELECT CountryName,
       IsoCode AS [ISO Code]
  FROM Countries
WHERE  CountryName LIKE '%a%a%a%'
 ORDER BY IsoCode

13. Mix of Peak and River Names 
  SELECT Peaks.PeakName,
         Rivers.RiverName,
		 LOWER(CONCAT(LEFT(Peaks.PeakName, LEN(Peaks.PeakName)-1), Rivers.RiverName)) AS Mix
  FROM Peaks
         JOIN Rivers ON RIGHT(Peaks.PeakName,1) = LEFT(Rivers.RiverName, 1)
  ORDER BY Mix
  
  14. Games From 2011 and 2012 Year 
  SELECT TOP(50)
       Name,
       FORMAT(CAST(START AS DATE), 'yyyy-MM-dd') AS [Start]
  FROM Games
WHERE DATEPART(YEAR, Start) BETWEEN 2011 AND 2012
ORDER BY Start, 
         Name

15. User Email Providers 
SELECT Username,
       RIGHT(Email, LEN(Email)-CHARINDEX('@', Email)) AS [Email Provider]
FROM Users
ORDER BY [Email Provider],
         Username
         
16. Get Users with IPAddress 
SELECT Username,
       IpAddress AS [Ip Address]
FROM Users
WHERE IpAddress LIKE '___.1%.%.___'
ORDER BY Username

 17. Show All Games with Duration
SELECT Name AS [Game],
	   CASE
	   WHEN DATEPART(HOUR, Start) BETWEEN 0 AND 11
	   THEN 'Morning'
	   WHEN DATEPART(HOUR, Start) BETWEEN 12 AND 17
	   THEN 'Afternoon'
	   WHEN DATEPART(HOUR, Start) BETWEEN 18 AND 24
	   THEN 'Evening'
	   ELSE 'N/A'
	   END AS [Part of the Day],
	  CASE
	   WHEN Duration<=3
	   THEN 'Extra Short'
	   WHEN Duration BETWEEN 4 AND 6
	   THEN 'Short'
	   WHEN Duration>6
	   THEN 'Long'
	   WHEN Duration IS NULL
	   THEN 'Extra Long'
	   ELSE 'Error - must be unreachable case'
	   END AS [Duration]
 FROM Games
 ORDER BY [Game],
          [Duration],
          [Part of the Day]
          
  18. Orders Table
  SELECT ProductName,
         OrderDate,
		 DATEADD(DAY, 3, OrderDate) AS [Pay Due],
		 DATEADD(MONTH, 1, OrderDate) AS [Deliver Due]
   FROM Orders 
